/*******************************************************************************
 * Copyright (c) 2011-2015 EclipseSource Muenchen GmbH and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Stefan Dirix - initial API and implementation
 ******************************************************************************/
package org.eclipse.emf.ecp.emf2web.ui.handler;

import java.util.Collection;
import java.util.List;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.emf.ecp.emf2web.controller.GenerationController;
import org.eclipse.emf.ecp.emf2web.controller.GenerationInfo;
import org.eclipse.emf.ecp.emf2web.exporter.GenerationExporter;
import org.eclipse.emf.ecp.emf2web.ui.wizard.ExportSchemasWizard;
import org.eclipse.emf.ecp.view.spi.model.VView;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.handlers.HandlerUtil;

/**
 * Abstract implementation for an handler responsible for exporting view models.
 */
public abstract class AbstractSchemaExportCommandHandler extends AbstractHandler {

	/**
	 * This implementation uses the {@link #getViews(ExecutionEvent)}
	 * and {@link #openWizard(Collection, Shell)} methods to open an export wizard.
	 *
	 * @param event {@inheritDoc}
	 * @return {@inheritDoc}
	 * @throws ExecutionException {@inheritDoc}
	 */
	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		final Collection<VView> views = getViews(event);
		if (views == null || views.isEmpty()) {
			return null;
		}

		final Shell shell = HandlerUtil.getActiveShell(event);
		openWizard(views, shell);
		return null;
	}

	/**
	 * The default implementation opens the {@link ExportSchemaWizard} using the generation handlers returned by
	 * {@link #getGenerationController()} and {@link #getGenerationExporter()}.
	 *
	 * @param views
	 *            The views which shall be exported.
	 * @param shell
	 *            The shell for the wizard.
	 * @return
	 * 		The return value of the {@link WizardDialog}.
	 */
	protected int openWizard(Collection<VView> views, Shell shell) {
		final List<GenerationInfo> generationInfos = getGenerationController().generate(views);
		final ExportSchemasWizard wizard = new ExportSchemasWizard(generationInfos, getGenerationExporter());
		final WizardDialog dialog = new WizardDialog(shell, wizard);
		dialog.setPageSize(new Point(600, 600));
		return dialog.open();
	}

	/**
	 * Returns the views which shall be exported.
	 *
	 * @param event
	 *            The {@link ExecutionEvent} which is given by the {@link #execute(ExecutionEvent)} method.
	 * @return
	 * 		The collection of views which shall be exported.
	 */
	protected abstract Collection<VView> getViews(ExecutionEvent event);

	/**
	 * Returns the {@link GenerationController} which shall be used to generate the files.
	 *
	 * @return
	 * 		The {@link GenerationController} which shall be used.
	 */
	protected abstract GenerationController getGenerationController();

	/**
	 * Returns the {@link GenerationExporter} responsible for creating the files generated by the
	 * {@link GenerationController}.
	 *
	 * @return
	 * 		The {@link GenerationExporter} which shall be used.
	 */
	protected abstract GenerationExporter getGenerationExporter();
}
